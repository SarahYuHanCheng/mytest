/* Receive the controlling message, turning on/off and pwm, and
 * than set the corresponding pin.
 */
#include <WiFi.h>

#define SSID "CSIE-WLAN"
#define PASSWD "wificsie"
#define TCP_IP "192.168.208.100"
#define TCP_PORT 5000

WiFiClient wifiClient;

enum MotorPinID {
  L_F = 0,
  L_B,
  R_F,
  R_B,
  NUM_OF_MOTOR_PIN
};
static const uint8_t motorPins[NUM_OF_MOTOR_PIN] = {22, 23, 32, 33};  //  L_F, L_B,R_F, R_B

static char buf[32];
static int messageLen;
static char client_ID[] = "Sarah";
static int pos[5];

void forward(int t)
{
  ledcWrite(L_F, 180);
  ledcWrite(L_B, 0);
  ledcWrite(R_F, 180);
  ledcWrite(R_B, 0);
  Serial.println("forward");
  delay(t);
}
void backward(int t)
{

  ledcWrite(L_F, 0);
  ledcWrite(L_B, 180);
  ledcWrite(R_F, 0);
  ledcWrite(R_B, 180);
  Serial.println("backward");
  delay(t);
}
void left(int t)
{

  ledcWrite(L_F, 0);
  ledcWrite(L_B, 180);
  ledcWrite(R_F, 180);
  ledcWrite(R_B, 0);
  Serial.println("left");
  delay(t);
}
void right(int t)
{
  ledcWrite(L_F, 180);
  ledcWrite(L_B, 0);
  ledcWrite(R_F, 0);
  ledcWrite(R_B, 180);
  Serial.println("right");
  delay(t);
}
void initialPins()
{
  // Attach pins to the PWM controller.
  ledcAttachPin(motorPins[L_F], L_F);
  ledcAttachPin(motorPins[L_B], L_B);
  ledcAttachPin(motorPins[R_F], R_F);
  ledcAttachPin(motorPins[R_B], R_B);
  ledcSetup(L_F, 10000, 8);   // 10kHz, 8 bit resolution
  ledcSetup(L_B, 10000, 8);   // 10kHz, 8 bit resolution
  ledcSetup(R_F, 10000, 8); // 10kHz, 8 bit resolution
  ledcSetup(R_B, 10000, 8); // 10kHz, 8 bit resolution
  ledcWrite(L_F, 0);
  ledcWrite(L_B, 0);
  ledcWrite(R_F, 0);
  ledcWrite(R_B, 0);
}
IPAddress ip;
void setup()
{
   
    Serial.begin(115200);
    while (!Serial)
      ;       

    initialPins();
    
    // set WiFi
    WiFi.mode(WIFI_STA);
    WiFi.begin(SSID, PASSWD);
    while (WiFi.waitForConnectResult() != WL_CONNECTED) {
        // Connect failed, blink 0.5 second to indicate
        // the board is retrying.
        delay(500);
        WiFi.begin(SSID, PASSWD);
    }
    
    // Conenct to AP successfully
    while (!wifiClient.connect(TCP_IP, TCP_PORT)){
      delay(300);
      Serial.print("Attempting to connect to SERVER: ");
        Serial.println(TCP_IP);
    }
    reg_ID();

    delay(1000);
    xTaskCreate(
                    askPos,          /* Task function. */
                    "askPos",        /* String with name of task. */
                    10000,            /* Stack size in words. */
                    NULL,             /* Parameter passed as input of the task */
                    1,                /* Priority of the task. */
                    NULL);            /* Task handle. */
}  

void reg_ID()
{
    strcpy(buf,"Register|");
    strcat(buf,client_ID);
    wifiClient.write(buf, strlen(buf));
    wifiClient.flush();
}

void send_mes(char ID[],char mes[])
{
    sprintf(buf,"%s|%s",ID,mes);
    wifiClient.write(buf, strlen(buf));
    wifiClient.flush();
}
void get_buf(){
  char *pch;
    pch = strtok(buf,"|\0");
    int j = 0;
    while (pch != NULL)
  {
    int tmp = atoi(pch);
    pos[j] = tmp ;
    j++;
    pch = strtok(NULL,"[,]() ");
    
  }
}
void askPos( void * parameter )
{
    while(1)
    {
      if ((messageLen = wifiClient.available()) > 0) {
        int i = 0;
        do
        {
            buf[i++] = wifiClient.read();
        }while(i<32 && buf[i-1]!='\r');
        
        buf[i-1] = '\0';
        send_mes("Position","");
      }
      delay(100);
    }
    
    Serial.println("Ending task 1");
    vTaskDelete( NULL );
 
}


void loop()
{     
   Serial.println(pos[1]);
   Serial.println(pos[2]);
   Serial.println(pos[3]);
   Serial.println(pos[4]);
   delay(100);
} 
